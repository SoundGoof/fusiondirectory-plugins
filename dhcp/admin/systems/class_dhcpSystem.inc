<?php
/*
  This code is part of FusionDirectory (http://www.fusiondirectory.org/)
  Copyright (C) 2015-2016  FusionDirectory

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
*/

class DhcpHostsAttribute extends OrderedArrayAttribute
{
  function __construct ($label, $description, $ldapName, array $values = array(), $acl = '')
  {
    $attribute = new CompositeAttribute(
      $description, $ldapName,
      array(
        new SelectAttribute(
          '', '',
          $ldapName.'_parent', TRUE
        ),
        new SelectAttribute(
          '', '',
          $ldapName.'_mac', TRUE
        ),
        new SelectAttribute(
          '', '',
          $ldapName.'_ip', TRUE
        ),
        new HiddenAttribute(
          'dn'
        )
      ),
      FALSE,
      FALSE,
      $acl,
      $label
    );
    parent::__construct($attribute, FALSE, $values, TRUE);
  }

  protected function loadAttrValue ($attrs)
  {
  }

  function setParent (&$plugin)
  {
    parent::setParent($plugin);
    if (is_object($this->plugin)) {
      if (!$this->plugin->is_template) {
        $this->loadChoices();
        $this->loadRecords();
      } elseif (isset($this->plugin->attrs[$this->getLdapName()]['count'])) {
        $this->value = array();
        // TODO $this->loadAdditionalTemplatesValues();
      }
    }
  }

  function loadChoices()
  {
    $nodes = dhcpSystem::getDhcpParentNodes();
    $macs   = $this->plugin->parent->getBaseObject()->macAddress;
    if (!is_array($macs)) {
      $macs = array($macs);
    }
    $ips    = $this->plugin->parent->getBaseObject()->ipHostNumber;
    if (!is_array($ips)) {
      $ips = array($ips);
    }
    $this->setChoices($nodes, $macs, $ips);
    /* TODO - update mac and ip if main tab is modified */
  }

  function setChoices(array $parentNodes, array $macs, array $ips)
  {
    $this->attribute->attributes[0]->setChoices(array_keys($parentNodes), array_values($parentNodes));
    $this->attribute->attributes[1]->setChoices($macs);
    $this->attribute->attributes[2]->setChoices($ips);
  }

  function loadRecords()
  {
    global $config;

    $ldap = $config->get_ldap_link();
    $ldap->cd($config->current['BASE']);
    $ldap->search('(&(objectClass=dhcpHost)(cn='.$this->plugin->parent->getBaseObject()->cn.')(dhcpHWAddress=*))', array('dhcpStatements','dhcpHWAddress','dn'));
    while ($attrs = $ldap->fetch()) {
      $ip = '';
      foreach ($attrs['dhcpStatements'] as $statement) {
        if (preg_match('/fixed-address ([0-9\.]+)$/', $statement, $m)) {
          $ip = $m[1];
          break;
        }
      }
      $this->value[] = array(
        preg_replace('/^[^,]+,/', '', $attrs['dn']),
        preg_replace('/ethernet (([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2}))/', '\\1', $attrs['dhcpHWAddress'][0]),
        $ip,
        $attrs['dn']
      );
    }
    $this->initialValue = $this->getValue();
  }

  /* Special LDAP treatment that this attribute does after plugin ldap save */
  function postLdapSave ($ldap)
  {
    global $config;

    if ($this->plugin->is_template) {
      return;
    }
    /* FIXME - We should lock the object and check if we donâ€™t erase changes */
    $cn             = $this->plugin->parent->getBaseObject()->cn;
    $values         = $this->getValue();
    $iValues        = $this->getInitialValue();
    //~ $valueHashes    = array_flip(array_map('join', $values));
    $iValueHashes   = array_flip(array_map('join', $iValues));
    foreach ($values as $value) {
      $hash = join($value);
      if (isset($iValueHashes[$hash])) {
        unset($iValues[$iValueHashes[$hash]]);
        continue;
      }
      echo "<h1>adding $hash</h1>\n";
      $configDn = $value[0];
      if (preg_match('/([^,]+),'.preg_quote(get_ou('dhcpRDN')).'.+'.preg_quote($config->current['BASE']).'$/', $value[0])) {
        $configDn = $m[1];
      } else {
        trigger_error('Failed to parse '.$value[0].' to find DHCP configuration DN');
      }
      $dhcpTabs = objects::open($configDn, 'dhcpConfiguration');
      $dhcpTabs->getBaseObject()->attributesAccess['dhcpSections']->addHost($value[0], $cn, $value[1], $value[2]);
      $errors = $dhcpTabs->save();
      msg_dialog::displayChecks($errors);
    }
    foreach ($iValues as $value) {
      echo "<h1>del ".join($value)."</h1>\n";
      $configDn = $value[0];
      if (preg_match('/([^,]+),'.preg_quote(get_ou('dhcpRDN')).'.+'.preg_quote($config->current['BASE']).'$/', $value[0])) {
        $configDn = $m[1];
      } else {
        trigger_error('Failed to parse '.$value[0].' to find DHCP configuration DN');
      }
      $dhcpTabs = objects::open($configDn, 'dhcpConfiguration');
      $dhcpTabs->getBaseObject()->attributesAccess['dhcpSections']->delHost($value[3]);
      $errors = $dhcpTabs->save();
      msg_dialog::displayChecks($errors);
    }
    /* FIXME
     * For now this will fail if the same dn is computed for the new value and the old value (and this will most likely happen)
     * The easiest fix is to do the deleting first and then the adding
     * An other solution is to handle modification somehow
     * We should also look into what should be possible or not, like IP, Mac or cn duplication.
     * */
  }
}

class dhcpSystem extends simplePlugin
{
  var $objectclasses = array();

  protected $zonesCache;
  protected $loaded = FALSE;

  static function plInfo()
  {
    return array(
      'plShortName'     => _('DHCP'),
      'plDescription'   => _('Edit the DHCP zones of a system'),
      'plIcon'          => 'geticon.php?context=applications&icon=dhcp&size=48',
      'plSmallIcon'     => 'geticon.php?context=applications&icon=dhcp&size=16',
      'plObjectType'    => array('server','workstation','terminal','printer','component','winstation','phone','mobilePhone'),
      'plPriority'      => 4,

      'plProvidedAcls'  => parent::generatePlProvidedAcls(static::getAttributesInfo())
    );
  }

  static function getAttributesInfo ()
  {
    return array(
      'main' => array(
        'name'  => _('DHCP zones'),
        'class' => array('fullwidth'),
        'attrs' => array(
          new DhcpHostsAttribute(
            '', _('DHCP hosts declared for this system'),
            'dhcpHosts'
          )
        )
      ),
    );
  }

  function __construct ($dn = NULL, $object = NULL, $parent = NULL, $mainTab = FALSE)
  {
    parent::__construct($dn, $object, $parent, $mainTab);
  }

  static function getDhcpParentNodes()
  {
    global $config;
    $ldap = $config->get_ldap_link();
    $ldap->cd($config->current['BASE']);
    $ldap->search('(|(objectClass=dhcpService)(objectClass=dhcpGroup)'.
                    '(objectClass=dhcpSubnet)(objectClass=dhcpSharedNetwork))', array('cn'));

    $nodes = array();
    while ($attr = $ldap->fetch()) {
      $subdn = preg_replace('/,'.preg_quote(get_ou('dhcpRDN')).'.+$/', '', $attr['dn']);
      $parts = ldap_explode_dn($subdn, 1);
      if ($parts === FALSE) {
        /* Fallback */
        $nodes[$attr['dn']] = $subdn;
      } else {
        unset($parts['count']);
        $nodes[$attr['dn']] = implode('>', array_reverse($parts));
      }
    }
    return $nodes;
  }

  function ldap_save()
  {
    global $config;

    $ldap = $config->get_ldap_link();
    return $this->attributesAccess['dhcpHosts']->postLdapSave($ldap);
  }
}
